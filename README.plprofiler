PostgreSQL PL/pgSQL Performance Profiler
===============================================================================

This module (plugin_profiler) implements a performance profiler for functions
(and triggers) written in PL/pgSQL.

All feedback is welcome (you can find my contact information at the end of
this README).

The PL/pgSQL profiler is implemented as an instrumentation plugin - it does
absolutely nothing unless you load it into your PG server (see the "Usage"
section to learn how to load the plugin).  When the profiler is loaded into
a backend (and enabled), it intercepts every PL/pgSQL statement that you 
execute and writes performance information about each statement into a table 
of your choosing (the profiler can also write performance information to an 
XML file of your choosing, but that functionality is not yet complete and 
may never be).

So what kind of information does the profiler provide?  For each statement,
the profiler records:
   * execution count (number of times each statement is executed)
   * total execution time (how long did we spend executing each statement?)
   * longest execution time (how long did the slowest iteration take?)
   * number of scans (total number of sequential and indexed scans)
   * blocks fetched
   * blocks hit (blocks found in buffer pool)
   * tuples returned
   * tuples fetched 
   * tuples inserted
   * tuples updated
   * tuples deleted

As mentioned earlier, the profiler will record the performance counters in 
a table of your choosing.  Here's a small sample (we ran a simple function and 
recorded the performance counters in a table named profiler_stats):

test=# SELECT sourcecode, exec_count, time_total, time_longest, tuples_inserted FROM profiler_stats;

                       sourcecode                        | exec_count | time_total | time_longest | tuples_inserted
---------------------------------------------------------+------------+------------+--------------+-----------------
                                                         |          0 |          0 |            0 |               0
 BEGIN                                                   |          0 |          0 |            0 |               0
                                                         |          0 |          0 |            0 |               0
   FOR i in 1..count LOOP                                |          1 |   0.003207 |     0.003207 |             100
     INSERT INTO testTable VALUES( count, count*2 );     |        100 |   0.002833 |     0.000174 |             100
   END LOOP;                                             |          0 |          0 |            0 |               0
                                                         |          0 |          0 |            0 |               0
   RETURN COUNT;                                         |          1 |      9e-06 |        9e-06 |               0
(8 rows)

Notice the time_total and time_longest columns for the INSERT statement - we executed that statement 100 times, spending
a total of .002833 seconds and the longest iteration took .000174 seconds.

The primary key to the profiler_stats table is the OID of the target's pg_proc tuple + the line number.  That means that
all profiling information is co-mingled into the same table and you can use the function's OID to find the rows that you
want.  You can specify (using a GUC variable) the name of the table performance counter table if you don't want to mix
your results with other results.

Installation
===============================================================================
- Unpack the tarball from the root of your PG source tree (you know that you 
  are in the right place when you see that 'contrib' is a subdirectory of your
  current directory).

- Run 'make install'

"make install" will install two plugins into your $prefix/lib/postgresql/plugins
directory (the plugin_profiler and the plugin_debugger).

IMPORTANT NOTE:

	In the contrib/pldebugger directory, you will find a patch (named 
	profilerPatch<version>.diff, profilerPatch83.diff, for example).  This patch
	is optional - if you do NOT apply the patch to your PG source code tree, you
	will still get timing and execution counts, but you won't get any of the I/O-
	related performance counters.

	If you decide to apply the patch, you will need to "make clean install"
	the profiler (the profiler detects the patch when you compile it so you have 
	to rebuild the profiler if you apply the patch).


Usage
===============================================================================
To use the profiler, you must:

	1) Load the profiler plugin
	2) Tell the profiler where to store its results
	3) Run the PL/pgSQL functions/triggers that you want to profile
	4) View the results

LOADING THE PROFILER:

	The easiest way to load the profiler plugin is to execute the command:

		LOAD '$libdir/plugins/plugin_profiler';

	That will load the profiler into your session; if you prefer, you can 
	preload the profiler into all sessions by adding the following line to 
	your postgresql.conf configuration file:

    	shared_preload_libraries = '$libdir/plugins/plugin_profiler'

	There is a tiny (probably immeasurable) amount of extra overhead once 
	you've loaded the profiler (one extra C function call and two integer 
	tests for each PL/pgSQL function that you invoke).

ENABLING THE PROFILER:

	Once you've loaded the profiler, a new GUC variable will appear in
	the pg_settings view: plpgsql.profiler_tablename.

	That variable tells the profiler where to store the performance 
	counters that it gathers as you run your PL/pgSQL code.

	Simply set plpgsql.profiler_tablename to the name of a table.  The 
	profiler will automatically create the table that you named if it 
	does not already exist. (NOTE: the performance counter table won't 
	be created until you actually profile a function so don't be surprised
	 if you can't find the table after setting plpgsql.profiler_tablename).

	Once you've defined the plpgsql.profiler_tablename, the plugin will
	profile *every* PL/pgSQL function you invoke. 

DISABLING THE PROFILER:

	To disable the profiler, just set plpgsql.profiler_tablename to an
	empty string:

		SET plpgsql.profiler_tablename = '';

PROFILING A FUNCTION/TRIGGER:

	To profiler a function or a trigger, simply invoke it - if you've
	loaded and enabled the plugin, the profiler will record execution
	statistics into the performance counter table you specified (in 
	plpgsql.profiler_tablename).

VIEWING THE RESULTS:

	To see the profiling information recorded for your PL/pgSQL code, just
	SELECT from the performance counter table you named in 
	plpgsql.profiler_tablename.

	Note that all profiling information ends up in the same table - if you
	invoke many different functions, the performance counter table will 
	contain statistics for each function. Each row in the performance counter
	 table contains the OID of the profiled function (plus the line number).

	You can change the plpgsql.profiler_tablename at any time if you want 
	to segregate profiler results into many different tables (remember, the
	profiler will automatically create the performance counter table for
	you).

	You can also delete all rows (or, of course, selected rows) from the 
	performance counter table.  Or, you can simply DROP the performance 
	counter table (the profiler will automatically create the  table again
	if needed).


Notes:
===============================================================================

The performance counter table must look like this:

  CREATE TABLE profiler_stats( 
      sourceCode        TEXT, 
      func_oid          OID, 
      line_number       INT, 
      exec_count        INT8, 
      tuples_returned   INT8, 
      time_total        FLOAT8, 
      time_longest      FLOAT8, 
      num_scans         INT8, 
      tuples_fetched    INT8, 
      tuples_inserted   INT8, 
      tuples_updated    INT8, 
      tuples_deleted    INT8, 
      blocks_fetched    INT8, 
      blocks_hit        INT8
    ); 

   CREATE UNIQUE INDEX profiler_stats_pkey ON profiler_stats( func_oid, line_number );

You can name the table anything you like, but you must use the column 
names shown above.

As mentioned earlier, the profiler will automatically create the performance
counter table for you if it does not already exist.  If you let the profiler 
create the performance counter table for you, it will *always* have the right
form, even if the plugin changes from release to release.

If you want to store the performance counters in a TEMP table, you must
create that table yourself.  The easiest way to create such a table is to 
copy an existing performance counter table:

  CREATE TEMP TABLE myPerformanceCounters LIKE <existing performance counter table>

------

The profiler may throw a few surprises at you so be sure to read this section
if you see anything that's confusing.

First, it's important to keep in mind that the PL/pgSQL compiler/interpreter 
is lazy (in a good way).  The compiler doesn't actually "compile" any of the 
SQL statements in your code.  Instead, the compiler takes care of the control-
of-flow statements (like FOR, IF, WHILE, ...) and leaves everything else 
until later.  That means that, for example, some statements may incur extra
I/O the first time they get executed. Why? Because the first time you execute
an SQL statement (such as an INSERT statement), the PL/pgSQL interpreter will
parse, plan, and optimize that statement, causing I/O to the system tables. 
To weed out that extra system-table I/O, just execute your code once before
you bother to profile it (that will cause the interpreter to parse, plan, 
and optimize all of the statements that you hit in the first invocation so
the I/O won't show up once you start profiling).

------

Next, the profiler has an interesting "feature" (arguably a bug but someone
may find it useful with the right user interface in front of it). Certain 
PL/pgSQL statements "control the flow" through your functions.  The most
obvious example is the IF statement.  When you execute an IF statement, the
interpreter *may* execute the block of statements following the IF, or it may
execute the block of statements following the (optional) ELSE.  

When the profiler records the performance counter for such a statement, it 
aggregates the counters for all statements in the block controlled by that 
statement. If you look at the sample shown at the start of this document, 
you'll see that the IF statement controls a single INSERT statement.  The
INSERT statement inserted 100 tuples.  Notice that the IF statement also
suggests that it inserted 100 tuples.  That's because the IF statement
shows you the performance counters for itself plus the performance counters
for all of the statements controlled by that IF statement. This "feature" 
is more obvious when you have an IF statement that controls multiple statements.

The following statements fall under this "feature":
    IF / THEN / ELSE 
    LOOP
    WHEN (exception handler)
    WHILE
    FOR

License
===============================================================================
The PL/pgSQL profiler is released under the Artistic License.

    http://www.opensource.org/licenses/artistic-license.php

Copyright (c) 2004-2008 EnterpriseDB Corporation. All Rights Reserved.

Contact
===============================================================================
Korry Douglas (korry.douglas@enterprisedb.com)

